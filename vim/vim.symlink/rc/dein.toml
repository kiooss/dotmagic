[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let g:startify_change_to_dir = 0
'''

[[plugins]]
repo = 'nixprime/cpsm'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# [[plugins]]
# repo = 'ervandew/supertab'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#same_filetypes = {}
endif
" In c buffers, completes from cpp and d buffers.
let g:context_filetype#same_filetypes.c = 'cpp,d'
" In cpp buffers, completes from c buffers.
let g:context_filetype#same_filetypes.cpp = 'c'
" In gitconfig buffers, completes from all buffers.
let g:context_filetype#same_filetypes.gitconfig = '_'
" In default, completes from all buffers.
let g:context_filetype#same_filetypes._ = '_'
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'

# [[plugins]]
# repo = 'Shougo/neocomplete.vim'
# depends = 'context_filetype.vim'
# if = "has('lua')"
# on_event = 'InsertEnter'
# hook_source = '''
#   let g:neocomplete#enable_at_startup = 1
#   source ~/.vim/rc/plugins/neocomplete.rc.vim
# '''

#################################################
# Colors
#################################################
[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'lu-ren/SerialExperimentsLain'

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
#################################################

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " close NERDTree after a file is opened
  let g:NERDTreeQuitOnOpen=0
  " show hidden files in NERDTree
  let NERDTreeShowHidden=1
  " remove some files by extension
  let NERDTreeIgnore = ['\.js.map$', '\~$']
  " Toggle NERDTree
  nnoremap <silent> <leader>k :NERDTreeToggle<cr>
  " expand to the path of the file in the current buffer
  nnoremap <silent> <leader>y :NERDTreeFind<cr>
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'pbrisbin/vim-mkdir'
# repo = 'travisjeffery/vim-auto-mkdir'

[[plugins]]
repo = 'tomtom/tcomment_vim'

# [[plugins]]
# repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'benmills/vimux'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  " Prevent conflict with Neocomplete
  " Called once right before you start selecting multiple cursors
  function! Multiple_cursors_before()
    if exists(':NeoCompleteLock')==2
      exe 'NeoCompleteLock'
    endif
  endfunction

  " Called once only when the multiple selection is canceled (default <Esc>)
  function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
      exe 'NeoCompleteUnlock'
    endif
  endfunction
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'gregsexton/MatchTag'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
  let g:gutentags_ctags_executable='exctags'
  " As suggested in https://github.com/ludovicchabant/vim-gutentags/issues/113,
  " to only update existing tags files and never create new ones:
  let g:gutentags_project_root = ['tags']
  let g:gutentags_add_default_project_roots = 0
  " only need for debug.
  " let g:gutentags_define_advanced_commands = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'vim-scripts/CmdlineComplete'

[[plugins]]
repo = 'chemzqm/vim-jsx-improve'

# [[plugins]]
# repo = 'pangloss/vim-javascript'

# [[plugins]]
# repo = 'MaxMEllon/vim-jsx-pretty'

# [[plugins]]
# repo = 'mxw/vim-jsx'
# hook_add = '''
# let g:jsx_ext_required = 0
# '''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add ='''
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.js"
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-haml'

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-eunuch'

# [[plugins]]
# repo = 'vim-scripts/IndexedSearch'

[[plugins]]
repo = 'vim-scripts/jQuery'

[[plugins]]
repo = 'junegunn/vim-after-object'
hook_add = '''
  autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'

[[plugins]]
repo = 'nelstrom/vim-textobj-rubyblock'

[[plugins]]
repo = 'sickill/vim-pasta'

[[plugins]]
repo = 'tomtom/tlib_vim'

[[plugins]]
repo = 'MarcWeber/vim-addon-mw-utils'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<c-k>"
  let g:UltiSnipsJumpForwardTrigger="<c-k>"
  let g:UltiSnipsJumpBackwardTrigger="<c-j>"
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"

  " make vim recognizing snippets dir
  " use different snippets dir
  " let g:UltiSnipsSnippetsDir='~/.vim/my-snippets/'
  " let g:UltiSnipsSnippetDirectories=["UltiSnips"]
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'algotech/ultisnips-php'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_set_quickfix = 1
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_linter_aliases = {'javascript.jsx': 'javascript', 'jsx': 'javascript'}
  let g:ale_linters = {
  \   'php': ['php'],
  \   'javascript': ['eslint'],
  \   'ruby': ['ruby'],
  \}
  " let g:ale_open_list = 1
  " let g:ale_keep_list_window_open = 1
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  " set statusline+=%{ALEGetStatusLine()}
  " set statusline+=%*

  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'nelsyeung/twig.vim'

# [[plugins]]
# repo = 'tweekmonster/startuptime.vim'

# [[plugins]]
# repo = 'chemzqm/vim-easygit'
#
# [[plugins]]
# repo = 'chemzqm/denite-git'

[[plugins]]
repo = 'vim-scripts/StringComplete'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
