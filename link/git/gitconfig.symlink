# gitconfig
# vim: set ts=4 sw=4 tw=80 et ft=gitconfig:
[include]
path=.secret_gitconfig

[github]
user = kiooss

[alias]
# list all aliases
la = "!git config -l | grep alias | cut -c 7-"
cm = commit -a -v
cma = commit --amend
unstage = reset HEAD
hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
d = difftool
st = status
br = branch -vv
co = checkout
df = diff
dc = diff --cached
ls = ls-files
lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(cyan)(%ad) %C(bold blue)<%an>%Creset' --abbrev-commit --
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --stat
lol = log --graph --decorate --pretty=oneline --abbrev-commit
lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
lm = log --pretty=format:'%s%n   by %C(yellow)%an%Creset (%ad)%n %n%b' --date=local
cc = clean -i
wc = whatchanged
logd = log --all --full-history
noffmerge = merge --no-ff --log --verbose
# Show files ignored by git:
ign = ls-files -o -i --exclude-standard
# unmerged commit with master
notinmaster = log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph master..
notin = log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph
out = "!git fetch; git cherry origin/HEAD -v"
#dp = diff --stat origin/master HEAD
dp = "!DIFF_PREVIEW1=$(git diff --stat origin/master HEAD);"
delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"
diff-ignore-space = diff --ignore-space-at-eol -b -w --ignore-blank-lines

# order files by number of commits, ascending
churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"

# show all deleted files in the repo
deleted = "!git log --diff-filter=D --summary | grep delete"

# current branch
cbr = rev-parse --abbrev-ref HEAD

# show number of commits per contributer, sorted
count = shortlog -sn

undo = reset --soft HEAD~1
amend = commit -a --amend

cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

# rebase the current branch with changes from upstream remote
update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

# tag aliases
# show the last tag
lt = describe --tags --abbrev=0

# assume aliases
assume = update-index --assume-unchanged
unassume = update-index --no-assume-unchanged
assumed = "!git ls-files -v | grep ^h | cut -c 3-"
unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD'  ]]; then export $VAR='$NEW'; fi\" $@;  }; f "

# git branch --merged | egrep -v "(^\*|master|dev|devlopment|staging)" | xargs git branch -d

delete-both-branch = "!f() { VAR=$1; git branch -d \"$VAR\" && git push origin \":$VAR\"; }; f"

# find email in source
grepemail = grep -E '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\\b'

submodule-update = submodule update --init --recursive

personal = "!git config user.name 'Yang Yang' && git config user.email 'kiooss@gmail.com'"

# show the log with deleted files
# git deleted                         # find a deleted file and its commit
# git checkout <commit>~1 <filename>  # restore the deleted file
deleted = log --diff-filter=D --summary

### hub
# show pr list
prlist = pr list --format='%t [%H â†’ %B] | %U%n'

[core]
excludesfile = ~/.gitignore_global
pager = diff-so-fancy | less --tabs=4 -RFX
quotepath = false
attributesfile = ~/.gitattributes

[diff]
tool = vimdiff
mnemonicprefix = true
[difftool]
prompt = false

# git colors: normal, black, red, green, yellow, blue, magenta, cyan, or white.
# git formats: bold, dim, ul (underline), blink, and reverse (swap foreground and background).
[color]
diff = auto
status = auto
branch = auto
interactive = auto
ui = true
[color "branch"]
current = yellow reverse
local = yellow
remote = green
[color "sh"]
branch = yellow
[color "diff"]
meta = yellow
frag = magenta bold
old = red bold
new = green bold
commit = yellow bold
whitespace = red reverse
[color "status"]
added = yellow bold
changed = green bold
untracked = red bold

[push]
default = current

[branch]
autosetupmerge = true

[grep]
extendRegexp = true
linenumber = true

[filter "media"]
clean = git-media-clean %f
smudge = git-media-smudge %f

[rerere]
enabled = true

[credential]
helper = cache --timeout=3600

[merge]
tool = vimdiff
conflictstyle = diff3

[mergetool]
prompt = false

[merge "railsschema"]
name = newer Rails schema version
driver = "ruby -e '\n\
          system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
          b = File.read(%(%A))\n\
          b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
          %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
          end\n\
          File.open(%(%A), %(w)) {|f| f.write(b)}\n\
          exit 1 if b.include?(%(<)*%L)'"

[color "diff-highlight"]
oldNormal = red bold
oldHighlight = red bold 52
newNormal = green bold
newHighlight = green bold 22

[diff-so-fancy]
stripLeadingSymbols = false

[commit]
template = ~/.dotfiles/link/git/commit.tpl
