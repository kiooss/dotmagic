# Non lazy load plugins
#  vim: set ts=2 sw=2 tw=80 et fdl=0:

# base {{{
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  command! DeinRecache call dein#recache_runtimepath()
  command! DeinCleanUp call map(dein#check_clean(), "delete(v:val, 'rf')")
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'mhinz/vim-startify'
merge = 0

[[plugins]]
on_if = "get(g:, 'enable_patched_font', 0)"
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
  " let g:EditorConfig_verbose = 1
'''

[[plugins]]
repo = 'pbrisbin/vim-mkdir'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
if !exists('g:context_filetype#same_filetypes')
  let g:context_filetype#same_filetypes = {}
endif
" In gitconfig buffers, completes from all buffers.
let g:context_filetype#same_filetypes.gitconfig = '_'
" In default, completes from all buffers.
let g:context_filetype#same_filetypes._ = '_'
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'
#}}}

# colorschemes {{{
[[plugins]]
repo = 'gruvbox-community/gruvbox'

[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'chriskempson/base16-vim'

[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'

[[plugins]]
repo = 'whatyouhide/vim-gotham'

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'

[[plugins]]
repo = 'nightsense/snow'

[[plugins]]
repo = 'drewtempelmeyer/palenight.vim'
# }}}

# enhance {{{
[[plugins]]
repo = 'gregsexton/MatchTag'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " let g:indentLine_char = '│'
  " let g:indentLine_first_char = ''
  " let g:indentLine_showFirstIndentLevel = 1
  " let g:indentLine_setColors = 0
  let g:indentLine_fileTypeExclude = ['startify', 'help', 'denite']

  nnoremap <silent> <leader>\ :<C-u>IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  if get(g:, 'enable_patched_font', 0)
    let g:gitgutter_sign_added = ''
    let g:gitgutter_sign_modified = ''
    let g:gitgutter_sign_removed = ''
    let g:gitgutter_sign_modified_removed = ''
  endif
'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add ='''
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.js"
'''

[[plugins]]
repo = 'tpope/vim-endwise'
hook_add = '''
let g:endwise_no_mappings = 1
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_operator='_s'
'''

[[plugins]]
repo = 'kiooss/vim-zenkaku-space'
#}}}

# text object {{{
[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'junegunn/vim-after-object'
hook_add = '''
  autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-function'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'thalesmello/vim-textobj-methodcall'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'

[[plugins]]
repo = 'nelstrom/vim-textobj-rubyblock'
# }}}

# snippets {{{
[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<c-k>"
  let g:UltiSnipsJumpForwardTrigger="<c-k>"
  let g:UltiSnipsJumpBackwardTrigger="<c-j>"
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"

  " make vim recognizing snippets dir
  " use different snippets dir
  let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips/'
  " let g:UltiSnipsSnippetDirectories=["UltiSnips"]
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'algotech/ultisnips-php'

[[plugins]]
repo = 'epilande/vim-react-snippets'
# }}}

# syntax {{{
[[plugins]]
repo = 'chemzqm/vim-jsx-improve'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-haml'

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'nelsyeung/twig.vim'

[[plugins]]
repo = 'StanAngeloff/php.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'groenewege/vim-less'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'neoclide/jsonc.vim'

[[plugins]]
repo = 'chr4/nginx.vim'

[[plugins]]
repo = 'vim-scripts/apachestyle'
# }}}

# utils {{{
[[plugins]]
repo = 'benmills/vimux'
hook_add ='''
  noremap <Leader>vg :<C-u>call VimuxRunCommand("git up")<CR>

  " Prompt for a command to run
  noremap <Leader>vp :VimuxPromptCommand<CR>

  " Run last command executed by VimuxRunCommand
  " map <Leader>vl :VimuxRunLastCommand<CR>

  " Inspect runner pane
  " map <Leader>vi :VimuxInspectRunner<CR>

  " Close vim tmux runner opened by VimuxRunCommand
  noremap <Leader>vq :VimuxCloseRunner<CR>

  " Interrupt any command running in the runner pane
  " map <Leader>vx :VimuxInterruptRunner<CR>

  " Zoom the runner pane (use <bind-key> z to restore runner pane)
  noremap <Leader>vz :call VimuxZoomRunner()<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let g:surround_no_insert_mappings = 1
'''

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'tpope/vim-dispatch'
[[plugins]]
repo = 'dense-analysis/ale'

[[plugins]]
repo = 'AndrewRadev/switch.vim'

[[plugins]]
repo = 'chrisbra/vim-zsh'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_silent_chdir = 1
  let g:rooter_patterns = [
    \ 'Rakefile',
    \ 'Gemfile',
    \ 'composer.json',
    \ '.git',
    \ '.git/',
    \ '_darcs/',
    \ '.hg/',
    \ '.bzr/',
    \ '.svn/'
    \ ]
'''

[[plugins]]
repo = 'wincent/vim-clipper'
hook_add = '''
let g:ClipperAddress='~/.clipper.sock'
let g:ClipperPort=0
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
  map s <Plug>Sneak_s
  " map S <Plug>Sneak_S
  let g:sneak#label = 1
  let g:sneak#use_ic_scs = 1
  let g:sneak#absolute_dir = 1
'''

[[plugins]]
repo = 'justinmk/vim-dirvish'

[[plugins]]
repo = 'justinmk/vim-gtfo'

[[plugins]]
repo = 'sunaku/vim-dasht'
on_if = 'executable("dasht")'
hook_add = '''
  nnoremap <silent> gK :call Dasht([expand('<cword>'), expand('<cWORD>')])<CR>
  vnoremap <silent> gK y:<C-U>call Dasht(getreg(0))<Return>
  let g:dasht_filetype_docsets = {}
  let g:dasht_filetype_docsets['ruby'] = ['Ruby_on_Rails*']
  let g:dasht_filetype_docsets['haml'] = ['Ruby_on_Rails*']
  let g:dasht_filetype_docsets['php'] = ['Symfony']
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
# mapping: gS gJ

[[plugins]]
repo = 'junegunn/vim-peekaboo'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'christianrondeau/vim-base64'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'tobyS/vmustache'

[[plugins]]
repo = 'mattn/vim-sqlfmt'

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'yarn install'

[[plugins]]
repo = 'phpactor/phpactor'
build = 'composer install'

[[plugins]]
repo = 'rhysd/vim-grammarous'

[[plugins]]
repo = 'liuchengxu/vim-which-key'

[[plugins]]
repo = 'tommcdo/vim-exchange'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add='''
noremap <silent><leader>V :<c-u>Vista finder coc<cr>
noremap <silent><leader>vs :<c-u>Vista!!<cr>
let g:vista_executive_for = {
  \ 'ruby': 'coc',
  \ 'php': 'coc',
  \ 'javascript': 'coc',
  \ 'typescript': 'coc',
  \ }
'''

[[plugins]]
repo = 'kkoomen/vim-doge'
hook_add = '''
let g:doge_mapping = '<leader>k'
let g:doge_mapping_comment_jump_forward = '<c-n>'
let g:doge_mapping_comment_jump_backward = '<c-p>'
'''

# [[plugins]]
# repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
hook_add='''
let g:php_cs_fixer_verbose = 1
nnoremap <silent><leader>cd :call PhpCsFixerFixDirectory()<CR>
nnoremap <silent><leader>cs :call PhpCsFixerFixFile()<CR>
'''
#}}}
