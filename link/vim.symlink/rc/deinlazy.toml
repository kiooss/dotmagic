# NOTE: the plugins bdon't have plugin directroy do not need dein lazy load mechanism.

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = "source $VIMPATH/rc/plugins/denite.vim"
hook_add = 'call kiooss#mappings#denite#init()'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = "source $VIMPATH/rc/plugins/deoplete.vim"

# [[plugins]]
# repo = 'Shougo/echodoc.vim'
# on_event = 'CompleteDone'
# hook_source = '''
# " let g:echodoc#type = 'signature'
# call echodoc#enable()
# '''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeToggle', 'NERDTreeFind', 'NERDTree']
hook_add = '''
  " close NERDTree after a file is opened
  let NERDTreeQuitOnOpen=0
  " show hidden files in NERDTree
  let NERDTreeShowHidden=1
  " remove some files by extension
  let NERDTreeIgnore = ['\.js.map$', '\~$', '\.o$[[file]]', '\.git$']
  " Toggle NERDTree
  nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
  nnoremap <silent> <Leader>nf :NERDTreeFind<CR>
  " expand to the path of the file in the current buffer
  " nnoremap <expr><silent> <leader>nf g:NERDTree.IsOpen() ?
  "       \ ":NERDTreeClose<CR>" : ":NERDTreeFind<CR>"
  " open NERDTree automatically when vim starts up on opening a directory
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) &&
        \ !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
  " close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
        \ b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'TarbarToggle'
hook_add = '''
  nnoremap <silent> <Leader>t :TagbarToggle<CR>
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
on_cmd = 'IndentLinesToggle'
hook_add = '''
  nnoremap <silent> <leader>\ :<C-u>IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_cmd = 'Tabularize'
hook_add = '''
  nnoremap <Leader>= :Tabularize /=>\?<CR>
  vnoremap <Leader>= :Tabularize /=>\?<CR>
  nnoremap <Leader>: :Tabularize /:\zs<CR>
  vnoremap <Leader>: :Tabularize /:\zs<CR>
  nnoremap <Leader>al :Tabularize /
  vnoremap <Leader>al :Tabularize /
'''

[[plugins]]
repo = 'lvht/phpcd.vim'
on_ft = 'php'
build = 'composer install'

# [[plugins]]
# repo = 'shawncplus/phpcomplete.vim'
# on_ft = 'php'

# [[plugins]]
# repo = 'stephpy/vim-php-cs-fixer'
# on_ft = 'php'

# [[plugins]]
# repo = 'swekaj/php-foldexpr.vim'
# on_ft = 'php'

[[plugins]]
repo = 'arnaud-lb/vim-php-namespace'
on_ft = ['php', 'yaml']
hook_add = '''
let g:php_namespace_sort_after_insert = 1
function! IPhpInsertUse()
  call PhpInsertUse()
  call feedkeys('a',  'n')
endfunction
" autocmd FileType php inoremap <Localleader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Localleader>u :call PhpInsertUse()<CR>

function! IPhpExpandClass()
  call PhpExpandClass()
  call feedkeys('a', 'n')
endfunction
" autocmd FileType php inoremap <Localleader>e <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Localleader>ec :call PhpExpandClass()<CR>

" autocmd FileType php inoremap <Localleader>s <Esc>:call PhpSortUse()<CR>
autocmd FileType php noremap <Localleader>su :call PhpSortUse()<CR>
'''

# [[plugins]]
# repo = 'qbbr/vim-symfony'
# on_ft = 'php'

# [[plugins]]
# repo = 'tobyS/vmustache'
# on_ft = 'php'
#
# [[plugins]]
# repo = 'tobyS/pdv'
# on_ft = 'php'
# depends = 'tobyS/vmustache'
# hook_add = '''
#   let g:pdv_template_dir = $HOME ."/.vim/plugged/pdv/templates_snip"
#   nnoremap <Leader>doc :call pdv#DocumentWithSnip()<CR>
# '''

# [[plugins]]
# repo = 'adoy/vim-php-refactoring-toolbox'
# on_ft = 'php'

# [[plugins]]
# repo = 'ecomba/vim-ruby-refactoring'
# on_ft = 'ruby'

# [[plugins]]
# repo = 'tsaleh/vim-shoulda'
# on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-bundler'
on_ft = 'ruby'

[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'vim-scripts/BufOnly.vim'
on_cmd = ['Bonly', 'BufOnly']

# [[plugins]]
# repo = 'Shougo/deol.nvim'
# on_cmd = ['Deol', 'DeolEdit', 'DeolCd']

[[plugins]]
repo = 'junegunn/gv.vim'
on_cmd = ['GV', 'GV!']

[[plugins]]
repo = 'junegunn/goyo.vim'
depends = 'limelight.vim'
on_cmd = ['Goyo']
hook_source = "source $VIMPATH/rc/plugins/goyo.vim"
hook_add = '''
  nnoremap <Leader>G :Goyo<CR>
'''

[[plugins]]
repo = 'junegunn/limelight.vim'
on_cmd = 'Limelight'

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = '''
nnoremap U :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'rafi/vim-sidemenu'
on_map = {nv = '<Plug>'}
hook_add = '''
  nmap <Leader>M <Plug>(sidemenu)
  xmap <Leader>M <Plug>(sidemenu-visual)
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <Leader>C <Plug>(calendar)
'''
hook_source = '''
  let g:calendar_cache_directory = $VARPATH.'/calendar'
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''

[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = 'let g:committia_min_window_width = 70'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_path = 'suda://'
hook_add = '''
  command! SudaWrite w suda://%
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_map = '<Plug>Commentary'
hook_add = '''
  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap cgc <Plug>ChangeCommentary
  nmap gcu <Plug>Commentary<Plug>Commentary
'''

[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
  nnoremap <silent> q :Sayonara<cr>
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_cmd = ['TableModeToggle']
hook_add = '''
  nnoremap <leader>T :TableModeToggle<cr>
'''
hook_source = '''
  " Markdown-compatible tables
  " let g:table_mode_corner='|'
  " ReST-compatible tables use
  let g:table_mode_corner_corner='+'
  let g:table_mode_header_fillchar='='
'''

[[plugins]]
repo = 'kristijanhusak/vim-carbon-now-sh'
on_cmd = ['CarbonNowSh']
hook_source = '''
  let g:carbon_now_sh_browser = 'save_to_clipper'
'''

[[plugins]]
repo = 'tweekmonster/startuptime.vim'
on_cmd = ['StartupTime']

[[plugins]]
repo = 'shmay/vim_html_to_haml'
on_cmd = ['Html2Haml']
hook_add = '''
  vnoremap <leader>H :Html2Haml<cr>
'''

[[plugins]]
repo = 'vimwiki/vimwiki'
on_cmd = ['Vimwiki']
hook_add = '''
  let g:vimwiki_use_calendar = 1
  let g:vimwiki_hl_headers = 1
  let g:vimwiki_hl_cb_checked = 1
  let g:vimwiki_autowriteall = 0
  let g:vimwiki_map_prefix = '<F12>'
  let g:vimwiki_table_mappings = 0

  nnoremap <silent> <Leader>W :<C-u>VimwikiIndex<CR>
'''
