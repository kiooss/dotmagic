###############################################################################
# Yang Yang's zsh config.
# kiooss@gmail.com
# vim: set ts=2 sw=2 tw=80 et fdm=marker fdl=0:
###############################################################################

# PROFILE_STARTUP {{{
PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
  zmodload zsh/zprof # Output load-time statistics
  # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
  PS4=$'%D{%M%S%.} %N:%i> '
  # exec 3>&2 2>"${XDG_CACHE_HOME:-$HOME/tmp}/zsh_statup.$$"
  exec 3>&2 2>"/tmp/zsh_statup.$$"
  setopt xtrace prompt_subst
fi
# }}}

# Base config {{{
# Path to your oh-my-zsh configuration.
export ZSH="$HOME/.oh-my-zsh"
# export is important if you want to use DOTFILES env in sub shell.
export DOTFILES="$HOME/.dotfiles"
# whether use patched font (for shell, tmux, and vim)
export ENABLE_PATCHED_FONT=true

MYZSH="$DOTFILES/zsh"
ZSH_CUSTOM="$MYZSH/omz_custom"
ZSH_THEME="powerlevel9k/powerlevel9k"
# DIRCOLORS=$HOME/.dircolors

# Remove duplicates in the following arrays.
typeset -U path cdpath fpath manpath

[[ -e ~/.terminfo ]] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo
[[ -z "$TMUX" ]] && export TERM=xterm-256color

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
[[ -d ~/workspace ]] && export CODE_DIR=~/workspace
[[ -d ~/.cache ]] && export CACHE_DIR=~/.cache

# secret env values
[[ -s $HOME/.secret_env ]] && source $HOME/.secret_env
[[ "$OSTYPE" = darwin* ]] && export SUDO_ASKPASS="$DOTFILES/bin/macos_sudo_askpass.sh"
# }}}

# PATH config {{{
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
# adding path directory for custom scripts
export PATH="$DOTFILES/bin:$PATH"
# check for custom bin directory and add to path
[[ -d "$HOME/bin" ]] && export PATH="$HOME/bin:$PATH"
[[ -d "$HOME/.local/bin" ]] && export PATH="$HOME/.local/bin:$PATH"
[[ -d "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"
# [[ -d "$HOME/venv/py3/bin/" ]] && export PATH="$HOME/venv/py3/bin/:$PATH"
# rbenv
# export PATH="$DOTFILES/vendor/rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"
# pyenv
# export PATH="$HOME/.pyenv/bin:$PATH"

# Add android tools
if [[ -d /Applications/adt-bundle-mac-x86_64 ]]; then
  export ANDROID_HOME="/Applications/adt-bundle-mac-x86_64/sdk"
  export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
fi

export PATH=$PATH:$HOME/.dasht/bin
export MANPATH=$HOME/.dasht/man:$MANPATH

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
# }}}

# EDITOR ENV {{{
if (( $+commands[nvim] )); then
  export EDITOR=nvim
elif (( $+commands[vim] )); then
  export EDITOR=vim
else
  export EDITOR=vi
fi
export BUNDLER_EDITOR="$EDITOR"
export SVN_EDITOR="$EDITOR"
export GIT_EDITOR="$EDITOR"
# }}}

# P9K config {{{
export DEFAULT_USER="$USER"

if [[ $ENABLE_PATCHED_FONT == true ]]; then
  P9K_MODE='nerdfont-complete'
  P9K_USER_DEFAULT_ICON=$'\uF263'
  P9K_USER_ROOT_ICON=" ROOT "
fi

# P9K_LEFT_SEGMENT_SEPARATOR_ICON=$'\uE0B8'
# P9K_RIGHT_SEGMENT_SEPARATOR_ICON=$'\uE0BE'
P9K_LEFT_SEGMENT_SEPARATOR_ICON=$'\uE0C6'
P9K_RIGHT_SEGMENT_SEPARATOR_ICON=$'\uE0C7'

# P9K_FOLDER_ICON=""
# P9K_HOME_SUB_ICON="$(print_icon "HOME_ICON")"
# P9K_DIR_PATH_SEPARATOR=" $(print_icon "LEFT_SUBSEGMENT_SEPARATOR") "

P9K_COMMAND_EXECUTION_TIME_THRESHOLD=0

P9K_DIR_OMIT_FIRST_CHARACTER=false

P9K_BACKGROUND_JOBS_FOREGROUND='black'
P9K_BACKGROUND_JOBS_BACKGROUND='178'
P9K_NVM_BACKGROUND="238"
P9K_NVM_FOREGROUND="green"
P9K_CONTEXT_DEFAULT_FOREGROUND="blue"
P9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="015"

P9K_TIME_BACKGROUND='255'
P9K_TIME_FOREGROUND='blue'
#P9K_COMMAND_TIME_FOREGROUND='gray'
P9K_COMMAND_EXECUTION_TIME_BACKGROUND='245'
P9K_COMMAND_EXECUTION_TIME_FOREGROUND='black'

P9K_PROMPT_ON_NEWLINE=true
P9K_RPROMPT_ON_NEWLINE=false

P9K_MULTILINE_FIRST_PROMPT_PREFIX_ICON="%{%F{red}%}╭"
P9K_MULTILINE_LAST_PROMPT_PREFIX_ICON="%{%F{red}%}╰%{%F{red}%}❯%{%F{green}%}❯%{%F{blue}%}❯ "

P9K_LEFT_PROMPT_ELEMENTS=(root_indicator os_icon dir dir_writable vcs)
P9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs command_execution_time time php_version node_version custom_base16_theme disk_usage ram)

P9K_CUSTOM_DRINK_WATER="drink_water"
P9K_CUSTOM_DRINK_WATER_FOREGROUND='black'
P9K_CUSTOM_DRINK_WATER_BACKGROUND='red'

P9K_CUSTOM_BASE16_THEME="echo \"\ue623\" \$(echo \$BASE16_THEME)"
P9K_CUSTOM_BASE16_THEME_FOREGROUND='black'
P9K_CUSTOM_BASE16_THEME_BACKGROUND='cyan'

# P9K_SHORTEN_DIR_LENGTH=2
# P9K_SHORTEN_STRATEGY="truncate_middle"

P9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind git-stash git-remotebranch)
P9K_VCS_SHOW_CHANGESET=true

P9K_TIME_FORMAT="%D{%H:%M}"
P9K_OS_ICON_BACKGROUND="red"
P9K_OS_ICON_FOREGROUND="black"
# P9K_TODO_BACKGROUND="16"
# P9K_TODO_FOREGROUND="black"
P9K_NODE_VERSION_FOREGROUND="black"
# }}}

# oh-my-zsh config {{{
# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

if [[ -n $SSHIDFILE ]]; then
  # zstyle :omz:plugins:ssh-agent agent-forwarding on
  zstyle :omz:plugins:ssh-agent identities $SSHIDFILE
  # zstyle :omz:plugins:ssh-agent lifetime 4h
fi

# }}}

# plugins config {{{
# oh-my-zsh plugins
plugins=(
  cp
  capistrano
  colored-man-pages
  # emoji
  encode64
  fancy-ctrl-z
  git
  gem
  gitfast
  history-substring-search
  nmap
  npm
  systemadmin
  ssh-agent
  tmuxinator
  themes
  z
  zsh-autosuggestions
  zsh-navigation-tools
  zsh-syntax-highlighting
  zsh-completions
)

plugins_on_need=(
  composer
  react-native
  yarn
  docker
  vagrant
)

for plugin ($plugins_on_need); do
  if (( $+commands[$plugin] )); then
    plugins=($plugins $plugin)
  fi
done

# my own zsh plugins
my_plugins=(
  abbreviations
  add-http-proxy
  aliases
  auto-ls-after-cd
  fix-ssh-agent
  insert-datestamp
  mysql
  thirsty
  todotxt
  util-functions
)

if [[ "$OSTYPE" = darwin* ]]; then
  # plugin used in my mac.
  plugins=(
    $plugins
    adb
    gradle
    pass
    vagrant-prompt
  )

  my_plugins=(
    $my_plugins
    aliases-osx
    util-functions-osx
  )
else
  # plugin used in my dev machine.
  plugins=(
    $plugins
    command-not-found
    symfony
    symfony2
  )

  # don't use some plugin when run as root
  [[ $(print -P "%#") == '#' ]] || plugins=($plugins rails rake-fast)

  my_plugins=(
    $my_plugins
    tmux-pane-words
  )
fi
# }}}

# fpath {{{
# add all my own plugin dir to fpath.
for plugin ($my_plugins); do
  fpath=($MYZSH/plugins/$plugin $fpath)
done

fpath+=$HOME/.dasht/etc/zsh/completions/

fpath+=/usr/share/zsh/functions
fpath+=/usr/share/zsh/vendor-completions/

# autoload function in functions dir
fpath=($MYZSH/functions $fpath)
autoload -U $MYZSH/functions/*(:t)
# }}}

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# MY CUSTOM CONFIG {{{
for config_file ($MYZSH/lib/*.zsh); do
  source $config_file
done
unset config_file

for plugin ($my_plugins); do
  source $MYZSH/plugins/$plugin/$plugin.plugin.zsh
done
unset plugin

# for theme_file ($MYZSH/themes/*.zsh); do
#   source $theme_file
# done
# unset theme_file

if hash rbenv 2>/dev/null; then
  eval "$(rbenv init -)"
fi

#if hash pyenv 2>/dev/null; then
#    eval "$(pyenv init -)"
#    eval "$(pyenv virtualenv-init -)"
#fi

# aws command completion
# source $HOME/.local/bin/aws_zsh_completer.sh

# base16-shell
source $MYZSH/base16-shell/base16-shell.plugin.zsh

# set php-version x.x.x in zshrc.local
source $DOTFILES/vendor/php-version/php-version.sh
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

if [[ -f "$HOME/.zshrc.local" ]]; then
  source "$HOME/.zshrc.local"
fi

if [[ -d "$HOME/.nix-profile/" ]]; then
  source $HOME/.nix-profile/etc/profile.d/nix.sh
fi

# Set up hub wrapper for git, if it is available; https://github.com/github/hub
if (( $+commands[hub] )); then
  alias git=hub
fi
# }}}

# FZF {{{
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS="--height 100% --reverse --border --history=$HOME/.fzf_history"
export FZF_CTRL_R_OPTS="--preview-window up:3 --preview 'echo {}'"
export FZF_CTRL_T_OPTS="--preview '[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (highlight -O ansi -l {} || coderay {} || rougify {} || cat {}) 2> /dev/null | head -500'"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# }}}

# PROFILE_STARTUP_END {{{
if [[ "$PROFILE_STARTUP" == true ]]; then
  zprof
  unsetopt xtrace
  exec 2>&3 3>&-
fi
# }}}

export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).
export PATH="/usr/local/opt/postgresql@9.4/bin:$PATH"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/yang/.sdkman"
[[ -s "/Users/yang/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/yang/.sdkman/bin/sdkman-init.sh"
