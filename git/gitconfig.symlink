# gitconfig
[include]
    path=.secret_gitconfig

[github]
    user = kiooss

; customizations
[alias]
    unstage = reset HEAD
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    d = difftool
    st = status
    br = branch -vv
    co = checkout
    df = diff
    dc = diff --cached
    lg = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files
    lm = log --pretty=format:'%s%n   by %C(yellow)%an%Creset (%ad)%n %n%b' --date=local

    # Show files ignored by git:
    ign = ls-files -o -i --exclude-standard
    # unmerged commit with master
    notinmaster = log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph master..
    notin = log --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph
    out = "!git fetch; git cherry origin/HEAD -v"
    #dp = diff --stat origin/master HEAD
    dp = "!DIFF_PREVIEW1=$(git diff --stat origin/master HEAD);"
    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"
    diff-ignore-space = diff --ignore-space-at-eol -b -w --ignore-blank-lines

    # order files by number of commits, ascending
    churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"

    # show all deleted files in the repo
    deleted = "!git log --diff-filter=D --summary | grep delete"

    # current branch
    cbr = rev-parse --abbrev-ref HEAD

    # show number of commits per contributer, sorted
    count = shortlog -sn

    undo = reset --soft HEAD~1
    amend = commit -a --amend

    cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

    # rebase the current branch with changes from upstream remote
    update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

    # tag aliases
    # show the last tag
    lt = describe --tags --abbrev=0

    # assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD'  ]]; then export $VAR='$NEW'; fi\" $@;  }; f "

[core]
    editor = vim
    excludesfile = ~/.gitignore_global
    ;pager = less -x4
    pager = less -FXRS -x2
    quotepath = false
[diff]
    tool = vimdiff
    mnemonicprefix = true
[difftool]
    prompt = false
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "sh"]
    branch = yellow
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[branch]
    # set up 'git pull' to rebase instead of merge
    #autosetuprebase = always

;[branch "master"]
;  remote = origin
;  merge = refs/heads/master
[push]
    default = current
[branch]
    autosetupmerge = true
[http]

[grep]
    extendRegexp = true
    linenumber = true
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[rerere]
    enabled = true
[credential]
    helper = cache --timeout=3600
